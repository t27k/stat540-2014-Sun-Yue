After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
```
```{r}
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[6], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
```
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
```
op<- par(mar =c(7, 4, 2, 2) + 0.1)
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
op<- par(mar =c(7, 4, 2, 2) + 0.1)
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
help(par)
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
op<- par(mar =c(7, 4, 2, 2) + 0.1)
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
par(op)
par(op)
corDatNorm <- cor(DataNorm)
cColNorm <- unlist(lapply(metaData$Genotype, colorMapGenotype))
heatmap.2( cor( DataNorm ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Sample-to-sample correlation heatmap after normalization" ))
DataClean <- Data[-which(names(Data) == Outlier)]
str(DataClean, list.len =6)
metaDataClean <- subset(metaData, !rownames(metaData) == Outlier)
str(metaDataClean)
DataNromClean <- as.data.frame(normalize.quantiles(as.matrix(DataClean)))
dimnames(DataNromClean) <- dimnames(DataClean)
str(DataNromClean, list.len =6)
boxplot(DataClean, main ="Data without outlier", las =2, cex.axis =0.8)
boxplot(DataNromClean, main ="Data without outlier after quantile-normalization", las =2, cex.axis =0.8)
boxplot(DataNromClean, main ="Data without outlier (quantile-normalized)", las =2, cex.axis =0.8)
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Sample-to-sample correlation heatmap after normalization without outlier" ))
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "New heatmap after normalization without outlier" ))
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "New heatmap after normalization without outlier" ))
source("http://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
library(preprocessCore)
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
First we do the normalization via preprocessCore.
```{r}
#source("http://bioconductor.org/biocLite.R")
#biocLite("preprocessCore")
library(preprocessCore)
```
```{r}
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
```
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
main = paste( "New heatmap after normalization without outlier" ))
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "New heatmap after normalization without outlier" ))
ncol(DataNromClean)
boxplot(DataClean, main ="Data without outlier", las =2, cex.axis =0.8)
boxplot(DataNromClean, main ="Data without outlier (quantile-normalized)", las =2, cex.axis =0.8)
metaDataNoOut <- subset(metaData, sampleID != "GSM172976")
metaDataNoOut <- subset(metaData, sampleID != "GSM172976")
neometaData <- subset(metaDataNoOut, BrainRegion == "neocortex")
neoData <- subset(DataNromClean, BrainRegion == "neocortex")
neometaData <- subset(metaDataNoOut, BrainRegion == "neocortex")
observed expression = wild type expression + knockout effect + noise
yij=μ+τj+ϵiji∈{1,2,...,nj}j∈{wt,S1P2,S1P3}τwt=0E(ϵij)=0V(ϵij)=σ2ϵijiid
Here is the hypothesis test we will conduct:  H0:τS1P2=τS1P3=0
NeoDes <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],
BrainRegion == "neocortex")
BrainRegion == "neocortex")
Neometa <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],
BrainRegion == "neocortex")
Neometa <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],
BrainRegion == "neocortex")
BrainRegion == "neocortex"))
Neometa <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],BrainRegion == "neocortex")
NeoDat <- data.frame(DataClean)[, rownames(Neometa)]
NeoDesMat <- model.matrix(~ Genotype, NeoDes)
NeoDesMat <- model.matrix(~ Genotype, Neometa)
NeoData <- data.frame(DataClean)[, rownames(Neometa)]
NeoFit <- lmFit(NeoData, NeoDesMat)
NeoFit <- lmFit(NeoData, NeoDesMat)
library(limma)
NeoFit <- lmFit(NeoData, NeoDesMat)
NeoEbFit <- eBayes(NeoFit)
dsHits <- topTable(NeoEbFit, coef = grep("Genotype", colnames(coef(NeoEbFit))), n = Inf)
Neometa <- Neometa[order(Neometa$Genotype),]
NeoData <- NeoData[, match(rownames(Neometa), colnames(NeoData))]
NeoSubData <- NeoData[rownames(dsHits[1:50,]),]
col = jBuPuFun(256))
heatmap(cor(NeoSubDat), Rowv = NA, Colv = NA, scale = "none", margins = c(8, 8),
col = jBuPuFun(256))
heatmap(cor(NeoSubData), Rowv = NA, Colv = NA, scale = "none", margins = c(8, 8),
col = jBuPuFun(256))
heatmap.2( cor(NeoSubData ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( " Top 50 hits correlation heatmap" ))
cutoff <- 1e-3
cutdsHits <- subset(dsHits, P.Value < cutoff)
fdr <- dsHits[50,]$adj.P.Val
fd <- dsHits[50,]$adj.P.Val * 50
(fd <- dsHits[50,]$adj.P.Val * 50)
There are `r nrow(cutdsHits)` hits. The false discovery rate is `r fdr`, and `r fd` of these hits are expected to be false discoveries.
(fdr <- dsHits[50,]$adj.P.Val)
(fd <- dsHits[50,]$adj.P.Val * 50)
nrow(cutdsHits
)
cutdsHits <- subset(dsHits, P.Value < cutoff)
(nrow(cutdsHits))
(fdr <- dsHits[50,]$adj.P.Val)
(fd <- dsHits[50,]$adj.P.Val * 50)
prepareData<- function(myGenes, myDat, myDes) {
miniDat<- t(myDat[myGenes, ])
miniDat<- data.frame(gExp =as.vector(miniDat), gene =factor(rep(colnames(miniDat),
each =nrow(miniDat)), levels =colnames(miniDat)))
miniDat<- suppressWarnings(data.frame(myDes, miniDat))
miniDat
}
prepareData<- function(myGenes, myDat, myDes) {
miniDat<- t(myDat[myGenes, ])
miniDat<- data.frame(gExp =as.vector(miniDat), gene =factor(rep(colnames(miniDat),
each =nrow(miniDat)), levels =colnames(miniDat)))
miniDat<- suppressWarnings(data.frame(myDes, miniDat))
miniDat
}
stripplotIt<- function(myData, ...) {
stripplot(gExp ~ Genotype | gene, myData, group =BrainRegion, auto.key =TRUE, jitter.data =TRUE, type =c("p", "a"), grid =TRUE, ...)
}
exiProbe <- dsHits[1:4, c("P.Value", "adj.P.Val")]
borProbe <- dsHits[10000:10003, c("P.Value", "adj.P.Val")]
sampleProbe <- rbind(exiProbe, borProbe)
sampleProbe$probe <- c(rep("exciting", 4), rep("boring", 4))
print(xtable(sampleProbe, digits = 4), type = "html", include.rownames = TRUE)
help(xtable)
library(xtable)
exiProbe <- dsHits[1:4, c("P.Value", "adj.P.Val")]
borProbe <- dsHits[10000:10003, c("P.Value", "adj.P.Val")]
sampleProbe <- rbind(exiProbe, borProbe)
sampleProbe$probe <- c(rep("exciting", 4), rep("boring", 4))
sampleDat <- prepareData(rownames(sampleProbe), NeoDat, NeoDes)
stripplotIt(sampleDat)
exiProbe <- dsHits[1:3, c("P.Value", "adj.P.Val")]
borProbe <- dsHits[10000:10002, c("P.Value", "adj.P.Val")]
sampleProbe <- rbind(exiProbe, borProbe)
sampleProbe$probe <- c(rep("exciting", 3), rep("boring", 3))
```{r fig.width = 10, fig.height = 6}
sampleDat <- prepareData(rownames(sampleProbe), NeoDat, NeoDes)
stripplotIt(sampleDat)
```
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMata)
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeometaMat)
NeoDesMat <- model.matrix(~ Genotype, Neometa)
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMat)
```{r,warning = FALSE}
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMat)
NeoFitCont <- contrasts.fit(NeoFit, cont.matrix)
NeoEbFitCont <- eBayes(NeoFitCont)
cutoff <- 0.1
```
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMat)
NeoFitCont <- contrasts.fit(NeoFit, cont.matrix)
NeoEbFitCont <- eBayes(NeoFitCont)
cutoff <- 0.1
S1P3wtSame <- subset(toptable(NeoEbFitCont, adjust.method = "fdr", n = Inf),
adj.P.Val < cutoff)
(nrow(S1P3wtSame))
str(metaDataClean)
str(DataNormClean, list.len =6)
str(DataNormClean, list.len =6)
DataNromClean <- as.data.frame(normalize.quantiles(as.matrix(DataClean)))
str(DataNormClean, list.len =6)
DataNormClean <- as.data.frame(normalize.quantiles(as.matrix(DataClean)))
dimnames(DataNormClean) <- dimnames(DataClean)
str(DataNormClean, list.len =6)
str(DataNormClean, list.len =6)
library(limma)
ffDesMat<- model.matrix(~Genotype * BrainRegion, metaDataClean)
ffFit<- lmFit(DataNormClean, ffDesMat)
ebFfFit<- eBayes(ffFit)
cutoff<- 0.001
dsHits<- topTable(ebFfFit, coef =which(colnames(coef(ffFit)) != "(Intercept)"),
n =Inf, p.value =cutoff)
nrow(dsHits)
boxCols<- rep(brewer.pal(11, "RdGy"), 50)
BRHits <- topTable(ebFfFit, coef =grep(":", colnames(coef(ffFit))), n =Inf)
sum(BRHits$adj.P.Val <cutoff)
cutBrainHits <- subset(BrainHits, adj.P.Val < cutoff)
cutBrainHits <- subset(BRHits, adj.P.Val < cutoff)
(cutBrainHits <- subset(BRHits, adj.P.Val < cutoff))
nrow(cutBrainHits <- subset(BRHits, adj.P.Val < cutoff))
sum(BRHits$adj.P.Val <cutoff)
noDat, noDes)
sampleDat <- prepareData(c(rownames(BrainHits[1:3,]), rownames(BrainHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BrainHits[1:3,]), rownames(BRHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BrainHits[1:3,]), rownames(BRHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BRHits[1:3,]), rownames(BRHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BRHits[1:3,]), rownames(BRHits[8000:8002,])),
DataNormClean, metaDataClean)
nrow(Data)
sampleDat <- prepareData(c(rownames(BRHits[1:3,]), rownames(BRHits[10000:10002,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[5000:5003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[10000:10003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[5000:5003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[5000:5003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
GenoHits <- topTable(noEbFit, coef = grep("Genotype", colnames(coef(noEbFit))),
adjust.method = "BH", n = Inf)
GenoHits <- topTable(ebFfFit, coef = grep("Genotype", colnames(coef(noEbFit))),
adjust.method = "BH", n = Inf)
GenoHits <- topTable(ebFfFit, coef = grep("Genotype", colnames(coef(ebFfFit))),
adjust.method = "BH", n = Inf)
cutGenoHits <- subset(GenoHits, adj.P.Val < cutoff)
sum(GenoHits$adj.P.Val <cutoff)
plot.points = FALSE, n = 300)
densityplot(~ BRHits$adj.P.Val + GenoHits$adj.P.Val, auto.key = TRUE,
plot.points = FALSE, n = 300)
sum(GenoHits$adj.P.Val <cutoff)
sum(BRHits$adj.P.Val <cutoff)
nrow(dsHits)
library(limma)
ffDesMat<- model.matrix(~Genotype * BrainRegion, metaDataClean)
ffFit<- lmFit(DataNormClean, ffDesMat)
ebFfFit<- eBayes(ffFit)
cutoff<- 1e-3
dsHits<- topTable(ebFfFit, coef =which(colnames(coef(ffFit)) != "(Intercept)"),
n =Inf, p.value =cutoff)
nrow(dsHits)
cutoff<- 0.1
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion", n =Inf)
sum(BRHits$adj.P.Val <cutoff)
cutoff<- 0.1
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion", n =Inf)
sum(BRHits$adj.P.Val <cutoff)
BR_hits <- subset(brmatters, brmatters$adj.P.Val < cutoff)
BR_hits <- subset(BRHits, brmatters$adj.P.Val < cutoff)
cutBrainHits <- subset(BRHits, adj.P.Val < cutoff)
nrow(cutBrainHits)
cutBrainHits <- subset(BRHits, BRHits$adj.P.Val < cutoff)
nrow(cutBrainHits)
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion", n =Inf)
cutBrainHits <- subset(BRHits, BRHits$adj.P.Val < cutoff)
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion",colnames(coef(ebFfFit))) n =Inf)
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion",colnames(coef(ebFfFit))), n =Inf)
cutBrainHits <- subset(BRHits, BRHits$adj.P.Val < cutoff)
nrow(cutBrainHits)
GenoHits <- topTable(ebFfFit, coef = grep("Genotype", colnames(coef(ebFfFit))),
adjust.method = "BH", n = Inf)
sum(GenoHits$adj.P.Val <cutoff)
plot.points = FALSE, n = 300)
densityplot(~ BRHits$adj.P.Val + GenoHits$adj.P.Val, auto.key = TRUE,
plot.points = FALSE, n = 300)
sum(GenoHits$adj.P.Val <cutoff)
sum(BRHits$adj.P.Val <cutoff)
library(preprocessCore)
```
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
install.packages("preprocessCore")
library(lattice)
library(grid)
library(hexbin)
library(preprocessCore)
biocLite("preprocessCore")
source("http://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
source("http://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
library(preprocessCore)
library("limma", lib.loc="D:/Program Files/R/R-3.0.2/library")
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
```
help(brewer.pal)
help(pal)
help(brewer)
help(rep)
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```{r}
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
```
HELP(ColorBrewer )
help(ColorBrewer )
help(RColorBrewer)
library(RColorBrewer)
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
help(brewer.pal)
boxCols<- rep(brewer.pal(11, "RdGy"))
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")
help (())
help ('r')
help ("**")
help ("\r")
help (\r)
clc
clear
cl
array.data <- 3
help(read.table)
array <- read.table("GSE37599-data.tsv", header = TRUE, row.names = 1)
getwd()
setwd("~/homework_02")
setwd("homework_02")
getwd()
array <- read.table("GSE37599-data.tsv", header = TRUE, row.names = 1)
str(array)
nrow(array)
ncol(array)
names(array)
1096
help(splom)
help(hexbin)
help (rep)
help (splom)
library(hexbin)
library(limma)
library(lattice)
library(ggplot2)
library(hexbin)
install.packages("hexbin")
(hexbin)
library(hexbin)
install.packages("ggplot2")
help(splom)
splom(array, panel = panel.hexbinplot)
splom(~array, panel = panel.hexbinplot)
help(heatmap)
heatmap(as.matrix(arrary[1:100, ]))
heatmap(as.matrix(array[1:100, ]))
(pearson.array <- cor(array))
heapmap(pearson.array)
heatmap(pearson.array)
pca <- prcomp(t(array))
help (data.frame)
pcadata <- data.frame(PC1 = pca$x[, "PC1"], PC2 = pca$x[, "PC2"], what = rownames(pca$x))
plot(PC2 ~ PC1, pcadata, type ="n")
with(pcadata, text(PC1, PC2, labels = what))
plot(PC1 ~ PC2, pcadata, type ="n")
with(pcadata, text(PC1, PC2, labels = what))
with(pcadata, text(PC1, PC2, labels = what))
with(pcadata, text(PC2, PC1, labels = what))
plot(PC2 ~ PC1, pcadata, type ="n")
with(pcadata, text(PC1, PC2, labels = what))
pca <- prcomp(t(array))
pcadata <- data.frame(PC1 = pca$x[, "PC1"], PC2 = pca$x[, "PC2"], name = rownames(pca$x))
plot(PC2 ~ PC1, pcadata, type ="n")
with(pcadata, text(PC1, PC2, labels = name))
(pearson.array <- cor(array))
head(array)
swap <- c("b1", "c2")
help (c)
help (rev)
names(array)[match(swap, names(array))] <- rev(swap)
head(array)
array <- array[, order(colnames(array))]
head(array)
splom(array, panel = panel.hexbinplot)
heatmap(as.matrix(array[1:100,]))
heatmap(cor(array))
write.table(array, "array-post.tsv", row.names = TRUE, col.names = NA)
(groups <- factor(c("b","b","b","c","c","c",)) )
(groups <- factor(c("b","b","b","c","c","c")) )
(des <- model.matrix(~groups))
(des <- model.matrix(groups))
(des <- model.matrix(~groups))
library(limma)
fit <- lmFit(array, des)
fit <- eBayes(fit)
array.results <- topTable(fit, coef = "groupsc", n = Inf)
library(yeast2.db)
package.installation(yeast2.db)
packages.installation("yeast2.db"")
source("http://bioconductor.org/biocLite.R")
biocLite("yeast2.db")
library(yeast2.db)
help(unlist)
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
help(I)
array.resutls <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.resutls <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.resutls <- with(array.results, data.frame(probe.id = I(iD), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(probe.id =I(ID), gene.id =I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
array.resutls <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(probe.id = ID, gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
array.results <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
help(I)
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
array.results <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(probe.id = I(id), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(probe.id = I(id), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
colnames(array.results)
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
colnames(array.results)
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
colnames(array.results)
array.results <- with(array.results, data.frame(probe.id = I(), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- with(array.results, data.frame(probe.id = I(probe.id), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
library(yeast2.db)
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
colnames(array.results)
array.results <- with(array.results, data.frame(probe.id = I(AveExpr), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
array.results <- with(array.results, data.frame(probe.id = I(AveExpr), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array.results <- topTable(fit, coef = "groupsc", n = Inf)
array.results <- topTable(fit, coef = "groupscd", n = Inf)
array.results <- topTable(fit, coef = "groupsc", n = Inf)
library(yeast2.db)
array.results$gene <- unlist(mget(array.results$ID, yeast2ORF))
array.results <- with(array.results, data.frame(probe.id = I(AveExpr), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
colnames(array.results)
help(colnames
)
help(colnames)
array.results <- subset(array.results, !is.na(gene.id))
nrow(array)
nrow(array.results)
(topProbe <- array.results$probe.id[1])
(topProbe <- array.results$gene.id[1])
(topProbe <- array.results$p.value[1])
(topProbe <- array.results$test.stat[1])
(topProbe <- array.results$probe.id[1])
(topProbe <- array.results$log.fc[1])
(topProbe <- array.results$probe.id[1])
tpDat <- data.frame(probe.id =I(topProbe), cond = groups, gExp =unlist(array.dat[topProbe, ]))
tpDat <- data.frame(probe.id =I(topProbe), cond = groups, gExp =unlist(array.dat[topProbe, ]))
stripplot(~gExp, tpDat, groups = cond, auto.key =TRUE)
tpDat <- data.frame(probe.id =I(topProbe), cond = groups, gExp =unlist(array.dat[topProbe, ]))
tpDat <- data.frame(probe.id =I(topProbe), cond = groups, gExp =unlist(arraydata[topProbe, ]))
tpDat <- data.frame(probe.id =I(topProbe), cond = groups, gExp =unlist(array[topProbe, ]))
stripplot(~gExp, tpDat, groups = cond, auto.key =TRUE)
array.results <- with(array.results, data.frame(probe.id = I(ID), gene.id = I(gene), p.value = P.Value, q.value = adj.P.Val, log.fc = logFC, test.stat = t))
array <- read.table("GSE37599-data.tsv", header = TRUE, row.names = 1)
str(array)
nrow(array)
ncol(array)
names(array)
(pearson.array <- cor(array))
heatmap(pearson.array)
install.packages("yeast2.db", dependencies = TRUE)
install.packages("yeast2.db", dependencies = TRUE)
install.packages("yeast2.db")
