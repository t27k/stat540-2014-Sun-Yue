Data <- read.table( "GSE7191-data.txt", sep = "\t", header = T, row.names = 1 )
metaData <- read.table( "GSE7191-design.txt", sep = "\t", header = T, row.names = 1 )
metaData <- metaData[colnames(Data), ]
all( row.names( metaData ) == colnames( Data ) )
str(Data)
head(Data)
tail(prDat)
tail(Data)
str(metaData)
head(metaData)
tail(metaData)
names(metadata)
nemaes(metaData)
names(metaData)
metaData$sampleID <- rownames(metaData)
metaData$DateRun <- as.factor(as.Date(metaData$DateRun, format="%m/%d/%y" ))
metaData$Genotype <- as.factor(metaData$Genotype)
str(metaData)
summary( metaData )
nrow(Data)
nrow(metaData)
table(metaData$Genotype, metaData$BrainRegion)
table(metaData$DateRun, metaData$Genotype)
table(metaData$Genotype, metaData$BrainRegion)
table(metaData$DateRun, metaData$Genotype)
table(metaData$Sex, metaData$BrainRegion)
table(metaData$Sex, metaData$BrainRegion)
help(addmargins)
table(metaData$Genotype, metaData$DateRun, metaData$Sex, metaData$BrainRegion)
table(metaData$DateRun, metaData$Genotype)
table(metaData$DateRun, metaData$BrainRegion)
library(lattice)
set.seed(1115)
library(lattice)
library(lattice)
(myRow <- sample(seq_len(nrow(Data)), size =1))
myRow <- sample(seq_len(nrow(Data)), size =1)
myProbe <- rownames(Data)[myRow]
myDat<- data.frame(metaData, gExp =as.vector(t(Data[myRow, ])))
myDat$grp<- with(myDat, interaction(BrainRegion, Sex, lex.order =TRUE))
stripplot(gExp ~ Genotype | BrainRegion, myDat, group = Sex, auto.key =TRUE, type =c("p", "a"))
library(lattice)
myRow <- sample(seq_len(nrow(Data)), size =1)
myProbe <- rownames(Data)[myRow]
myDat<- data.frame(metaData, gExp =as.vector(t(Data[myRow, ])))
myDat$grp<- with(myDat, interaction(BrainRegion, Sex, lex.order =TRUE))
stripplot(gExp ~ Genotype | BrainRegion, myDat, group = Sex, auto.key =TRUE, type =c("p", "a"))
densityplot(~gExp | BrainRegion, myDat, group = Genotype, auto.key =TRUE)
densityplot(~gExp | BrainRegion, myDat, group = Genotype, auto.key =TRUE)
densityplot(~gExp | BrainRegion, myDat, group = Genotype, auto.key =TRUE)
set.seed(1115)
myRow <- sample(seq_len(nrow(Data)), size =1)
myProbe <- rownames(Data)[myRow]
myDat<- data.frame(metaData, gExp =as.vector(t(Data[myRow, ])))
myDat$grp<- with(myDat, interaction(BrainRegion, Sex, lex.order =TRUE))
stripplot(gExp ~ Genotype | BrainRegion, myDat, group = Sex, auto.key =TRUE, type =c("p", "a"))
densityplot(~gExp | BrainRegion, myDat, group = Genotype, auto.key =TRUE)
stripplot(gExp ~ Genotype | BrainRegion, myDat, group = Sex, auto.key =TRUE, type =c("p", "a"))
with(myDat, tapply(gExp, list(Genotype, Sex, BrainRegion), mean))
with(myDat, tapply(gExp, list(Genotype, BrainRegion, Sex), mean))
library(gplots)
library(RColorBrewer)
help(gplots)
library(gplots)
library(gplots)
library(RColorBrewer)
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n", "(with the worst outlier)" ) )
help(heatmap.2)
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )# )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n" )
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n" )
main = paste( "Correlation heatmap of 50 samples", "\n" ))
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n" ))
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,main = paste( "Correlation heatmap of 50 samples" ))
cols<- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n", "(with the worst outlier)" ) )
library(gplots)
library(RColorBrewer)
cols<- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n", "(with the worst outlier)" ) )
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples", "\n", "(with the worst outlier)" ) )
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples") )
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Sample-to sample correlation heatmap") )
help(heatmap.2)
help(brewer.pal)
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples" )
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples" ))
cols <- c( rev( brewer.pal( 9,"YlOrRd" ) ) )#, "#FFFFFF" )
heatmap.2( cor( Data ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Correlation heatmap of 50 samples" ))
colnames(Data)
foo<- apply(cor(Data), 1, quantile, probs =1:5/n)
foo<- apply(cor(Data), 1, quantile, probs =1:5/50)
target<- apply(cor(Data), 1, quantile, probs =1:5/50)
target2<- data.frame(cor =as.vector(target), ID =factor(rep(rownames(metaData), each =5), levels =rownames(metaData)), qtile =1:5/50)
dotplot(ID ~ cor, target2)
targetpool<- data.frame(cor =as.vector(target), ID =factor(rep(rownames(metaData), each =5), levels =rownames(metaData)), qtile =1:5/50)
dotplot(ID ~ cor, targetpool)
(badSample<- names(which.min(colMeans(target))))
target<- apply(cor(Data), 1, quantile, probs =1:1/50)
targetpool<- data.frame(cor =as.vector(target), ID =factor(rep(rownames(metaData), each =5), levels =rownames(metaData)), qtile =1:1/50)
dotplot(ID ~ cor, targetpool)
(badSample<- names(which.min(colMeans(target))))
target<- apply(cor(Data), 1, quantile, probs =1:5/50)
targetpool<- data.frame(cor =as.vector(target), ID =factor(rep(rownames(metaData), each =5), levels =rownames(metaData)), qtile =1:5/50)
dotplot(ID ~ cor, targetpool)
(badSample<- names(which.min(colMeans(target))))
(Outlier<- names(which.min(colMeans(target))))
library(hexbin)
library(grid)
library(hexbin)
metaData$grp <- with(metaData, interaction(Genotype, BrainRegion, Sex))
(featureGrp<- metaData[Outlier, "grp"])
metaData$grp <- with(metaData, interaction(Genotype, BrainRegion, Sex))
(featureGrp<- metaData[Outlier, "grp"])
library(grid)
library(hexbin)
splom(s1pDat[metaData$grp == featureGrp], panel =panel.hexbinplot)
library(lattice)
splom(s1pDat[metaData$grp == featureGrp], panel =panel.hexbinplot)
library(grid)
library(hexbin)
splom(Data[metaData$grp == featureGrp], panel =panel.hexbinplot)
prDesDat <- Data[metaData$grp == featureGrp
prDesDat$outlier <- FALSE
ggplot(prDesDat, aes(sampleID, gExp, colour = outlier)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
help(ggplot)
boxplot(s1pDatClean, main ="s1pDatClean (outlier removed)", las =2, cex.axis =0.8)
library(preprocessCore)
install.package("preprocessCore")
install.packages("preprocessCore")
source("http://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
library(preprocessCore)
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
help(par)
boxCols<- rep(brewer.pal(11, "RdGy")[7], n)
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
op<- par(mar =c(7, 4, 2, 2) + 0.1)
help(par)
boxplot(Data, border =boxCols, main ="1.The data as provided", las =2, cex.axis =0.8)
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
boxCols<- rep(brewer.pal(11, "RdGy")[6], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[6], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
```
```{r}
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[6], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
```
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
```
op<- par(mar =c(7, 4, 2, 2) + 0.1)
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
op<- par(mar =c(7, 4, 2, 2) + 0.1)
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
help(par)
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
op<- par(mar =c(7, 4, 2, 2) + 0.1)
```
First gene expression boxplots no normalization:
```{r}
boxplot(Data, border =boxCols, main ="1. The data as provided", las =2, cex.axis =0.8)
```
After normalization:
```{r}
boxplot(DataNorm, border =boxCols, main ="2. The data after quantile normalization", las =2, cex.axis =0.8)
par(op)
par(op)
corDatNorm <- cor(DataNorm)
cColNorm <- unlist(lapply(metaData$Genotype, colorMapGenotype))
heatmap.2( cor( DataNorm ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none",
col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Sample-to-sample correlation heatmap after normalization" ))
DataClean <- Data[-which(names(Data) == Outlier)]
str(DataClean, list.len =6)
metaDataClean <- subset(metaData, !rownames(metaData) == Outlier)
str(metaDataClean)
DataNromClean <- as.data.frame(normalize.quantiles(as.matrix(DataClean)))
dimnames(DataNromClean) <- dimnames(DataClean)
str(DataNromClean, list.len =6)
boxplot(DataClean, main ="Data without outlier", las =2, cex.axis =0.8)
boxplot(DataNromClean, main ="Data without outlier after quantile-normalization", las =2, cex.axis =0.8)
boxplot(DataNromClean, main ="Data without outlier (quantile-normalized)", las =2, cex.axis =0.8)
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "Sample-to-sample correlation heatmap after normalization without outlier" ))
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "New heatmap after normalization without outlier" ))
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "New heatmap after normalization without outlier" ))
source("http://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
library(preprocessCore)
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
First we do the normalization via preprocessCore.
```{r}
#source("http://bioconductor.org/biocLite.R")
#biocLite("preprocessCore")
library(preprocessCore)
```
```{r}
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
```
```{r}
boxCols<- rep(brewer.pal(11, "RdGy")[7], 50)
boxCols[which(names(DataNorm) == Outlier)] <- brewer.pal(11, "RdGy")[4]
```
main = paste( "New heatmap after normalization without outlier" ))
heatmap.2( cor( DataNromClean ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( "New heatmap after normalization without outlier" ))
ncol(DataNromClean)
boxplot(DataClean, main ="Data without outlier", las =2, cex.axis =0.8)
boxplot(DataNromClean, main ="Data without outlier (quantile-normalized)", las =2, cex.axis =0.8)
metaDataNoOut <- subset(metaData, sampleID != "GSM172976")
metaDataNoOut <- subset(metaData, sampleID != "GSM172976")
neometaData <- subset(metaDataNoOut, BrainRegion == "neocortex")
neoData <- subset(DataNromClean, BrainRegion == "neocortex")
neometaData <- subset(metaDataNoOut, BrainRegion == "neocortex")
observed expression = wild type expression + knockout effect + noise
yij=μ+τj+ϵiji∈{1,2,...,nj}j∈{wt,S1P2,S1P3}τwt=0E(ϵij)=0V(ϵij)=σ2ϵijiid
Here is the hypothesis test we will conduct:  H0:τS1P2=τS1P3=0
NeoDes <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],
BrainRegion == "neocortex")
BrainRegion == "neocortex")
Neometa <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],
BrainRegion == "neocortex")
Neometa <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],
BrainRegion == "neocortex")
BrainRegion == "neocortex"))
Neometa <- subset(metaData[- which(rownames(metaData) %in% "GSM172976"),],BrainRegion == "neocortex")
NeoDat <- data.frame(DataClean)[, rownames(Neometa)]
NeoDesMat <- model.matrix(~ Genotype, NeoDes)
NeoDesMat <- model.matrix(~ Genotype, Neometa)
NeoData <- data.frame(DataClean)[, rownames(Neometa)]
NeoFit <- lmFit(NeoData, NeoDesMat)
NeoFit <- lmFit(NeoData, NeoDesMat)
library(limma)
NeoFit <- lmFit(NeoData, NeoDesMat)
NeoEbFit <- eBayes(NeoFit)
dsHits <- topTable(NeoEbFit, coef = grep("Genotype", colnames(coef(NeoEbFit))), n = Inf)
Neometa <- Neometa[order(Neometa$Genotype),]
NeoData <- NeoData[, match(rownames(Neometa), colnames(NeoData))]
NeoSubData <- NeoData[rownames(dsHits[1:50,]),]
col = jBuPuFun(256))
heatmap(cor(NeoSubDat), Rowv = NA, Colv = NA, scale = "none", margins = c(8, 8),
col = jBuPuFun(256))
heatmap(cor(NeoSubData), Rowv = NA, Colv = NA, scale = "none", margins = c(8, 8),
col = jBuPuFun(256))
heatmap.2( cor(NeoSubData ), Rowv = NA, Colv = NA, symm = T, trace = "none", dendrogram = "none", col = cols, cexCol = 0.5, cexRow = 0.5,
main = paste( " Top 50 hits correlation heatmap" ))
cutoff <- 1e-3
cutdsHits <- subset(dsHits, P.Value < cutoff)
fdr <- dsHits[50,]$adj.P.Val
fd <- dsHits[50,]$adj.P.Val * 50
(fd <- dsHits[50,]$adj.P.Val * 50)
There are `r nrow(cutdsHits)` hits. The false discovery rate is `r fdr`, and `r fd` of these hits are expected to be false discoveries.
(fdr <- dsHits[50,]$adj.P.Val)
(fd <- dsHits[50,]$adj.P.Val * 50)
nrow(cutdsHits
)
cutdsHits <- subset(dsHits, P.Value < cutoff)
(nrow(cutdsHits))
(fdr <- dsHits[50,]$adj.P.Val)
(fd <- dsHits[50,]$adj.P.Val * 50)
prepareData<- function(myGenes, myDat, myDes) {
miniDat<- t(myDat[myGenes, ])
miniDat<- data.frame(gExp =as.vector(miniDat), gene =factor(rep(colnames(miniDat),
each =nrow(miniDat)), levels =colnames(miniDat)))
miniDat<- suppressWarnings(data.frame(myDes, miniDat))
miniDat
}
prepareData<- function(myGenes, myDat, myDes) {
miniDat<- t(myDat[myGenes, ])
miniDat<- data.frame(gExp =as.vector(miniDat), gene =factor(rep(colnames(miniDat),
each =nrow(miniDat)), levels =colnames(miniDat)))
miniDat<- suppressWarnings(data.frame(myDes, miniDat))
miniDat
}
stripplotIt<- function(myData, ...) {
stripplot(gExp ~ Genotype | gene, myData, group =BrainRegion, auto.key =TRUE, jitter.data =TRUE, type =c("p", "a"), grid =TRUE, ...)
}
exiProbe <- dsHits[1:4, c("P.Value", "adj.P.Val")]
borProbe <- dsHits[10000:10003, c("P.Value", "adj.P.Val")]
sampleProbe <- rbind(exiProbe, borProbe)
sampleProbe$probe <- c(rep("exciting", 4), rep("boring", 4))
print(xtable(sampleProbe, digits = 4), type = "html", include.rownames = TRUE)
help(xtable)
library(xtable)
exiProbe <- dsHits[1:4, c("P.Value", "adj.P.Val")]
borProbe <- dsHits[10000:10003, c("P.Value", "adj.P.Val")]
sampleProbe <- rbind(exiProbe, borProbe)
sampleProbe$probe <- c(rep("exciting", 4), rep("boring", 4))
sampleDat <- prepareData(rownames(sampleProbe), NeoDat, NeoDes)
stripplotIt(sampleDat)
exiProbe <- dsHits[1:3, c("P.Value", "adj.P.Val")]
borProbe <- dsHits[10000:10002, c("P.Value", "adj.P.Val")]
sampleProbe <- rbind(exiProbe, borProbe)
sampleProbe$probe <- c(rep("exciting", 3), rep("boring", 3))
```{r fig.width = 10, fig.height = 6}
sampleDat <- prepareData(rownames(sampleProbe), NeoDat, NeoDes)
stripplotIt(sampleDat)
```
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMata)
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeometaMat)
NeoDesMat <- model.matrix(~ Genotype, Neometa)
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMat)
```{r,warning = FALSE}
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMat)
NeoFitCont <- contrasts.fit(NeoFit, cont.matrix)
NeoEbFitCont <- eBayes(NeoFitCont)
cutoff <- 0.1
```
cont.matrix <- makeContrasts(S1P3Vswt = GenotypeS1P3_KO - GenotypeWild_type,
levels = NeoDesMat)
NeoFitCont <- contrasts.fit(NeoFit, cont.matrix)
NeoEbFitCont <- eBayes(NeoFitCont)
cutoff <- 0.1
S1P3wtSame <- subset(toptable(NeoEbFitCont, adjust.method = "fdr", n = Inf),
adj.P.Val < cutoff)
(nrow(S1P3wtSame))
str(metaDataClean)
str(DataNormClean, list.len =6)
str(DataNormClean, list.len =6)
DataNromClean <- as.data.frame(normalize.quantiles(as.matrix(DataClean)))
str(DataNormClean, list.len =6)
DataNormClean <- as.data.frame(normalize.quantiles(as.matrix(DataClean)))
dimnames(DataNormClean) <- dimnames(DataClean)
str(DataNormClean, list.len =6)
str(DataNormClean, list.len =6)
library(limma)
ffDesMat<- model.matrix(~Genotype * BrainRegion, metaDataClean)
ffFit<- lmFit(DataNormClean, ffDesMat)
ebFfFit<- eBayes(ffFit)
cutoff<- 0.001
dsHits<- topTable(ebFfFit, coef =which(colnames(coef(ffFit)) != "(Intercept)"),
n =Inf, p.value =cutoff)
nrow(dsHits)
boxCols<- rep(brewer.pal(11, "RdGy"), 50)
BRHits <- topTable(ebFfFit, coef =grep(":", colnames(coef(ffFit))), n =Inf)
sum(BRHits$adj.P.Val <cutoff)
cutBrainHits <- subset(BrainHits, adj.P.Val < cutoff)
cutBrainHits <- subset(BRHits, adj.P.Val < cutoff)
(cutBrainHits <- subset(BRHits, adj.P.Val < cutoff))
nrow(cutBrainHits <- subset(BRHits, adj.P.Val < cutoff))
sum(BRHits$adj.P.Val <cutoff)
noDat, noDes)
sampleDat <- prepareData(c(rownames(BrainHits[1:3,]), rownames(BrainHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BrainHits[1:3,]), rownames(BRHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BrainHits[1:3,]), rownames(BRHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BRHits[1:3,]), rownames(BRHits[5000:5002,])),
DataNormClean, metaDataClean)
sampleDat <- prepareData(c(rownames(BRHits[1:3,]), rownames(BRHits[8000:8002,])),
DataNormClean, metaDataClean)
nrow(Data)
sampleDat <- prepareData(c(rownames(BRHits[1:3,]), rownames(BRHits[10000:10002,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[5000:5003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[10000:10003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[5000:5003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
sampleDat <- prepareData(c(rownames(BRHits[1:4,]), rownames(BRHits[5000:5003,])),
DataNormClean, metaDataClean)
stripplotIt(sampleDat)
GenoHits <- topTable(noEbFit, coef = grep("Genotype", colnames(coef(noEbFit))),
adjust.method = "BH", n = Inf)
GenoHits <- topTable(ebFfFit, coef = grep("Genotype", colnames(coef(noEbFit))),
adjust.method = "BH", n = Inf)
GenoHits <- topTable(ebFfFit, coef = grep("Genotype", colnames(coef(ebFfFit))),
adjust.method = "BH", n = Inf)
cutGenoHits <- subset(GenoHits, adj.P.Val < cutoff)
sum(GenoHits$adj.P.Val <cutoff)
plot.points = FALSE, n = 300)
densityplot(~ BRHits$adj.P.Val + GenoHits$adj.P.Val, auto.key = TRUE,
plot.points = FALSE, n = 300)
sum(GenoHits$adj.P.Val <cutoff)
sum(BRHits$adj.P.Val <cutoff)
nrow(dsHits)
library(limma)
ffDesMat<- model.matrix(~Genotype * BrainRegion, metaDataClean)
ffFit<- lmFit(DataNormClean, ffDesMat)
ebFfFit<- eBayes(ffFit)
cutoff<- 1e-3
dsHits<- topTable(ebFfFit, coef =which(colnames(coef(ffFit)) != "(Intercept)"),
n =Inf, p.value =cutoff)
nrow(dsHits)
cutoff<- 0.1
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion", n =Inf)
sum(BRHits$adj.P.Val <cutoff)
cutoff<- 0.1
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion", n =Inf)
sum(BRHits$adj.P.Val <cutoff)
BR_hits <- subset(brmatters, brmatters$adj.P.Val < cutoff)
BR_hits <- subset(BRHits, brmatters$adj.P.Val < cutoff)
cutBrainHits <- subset(BRHits, adj.P.Val < cutoff)
nrow(cutBrainHits)
cutBrainHits <- subset(BRHits, BRHits$adj.P.Val < cutoff)
nrow(cutBrainHits)
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion", n =Inf)
cutBrainHits <- subset(BRHits, BRHits$adj.P.Val < cutoff)
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion",colnames(coef(ebFfFit))) n =Inf)
BRHits <- topTable(ebFfFit, coef =grep("BrainRegion",colnames(coef(ebFfFit))), n =Inf)
cutBrainHits <- subset(BRHits, BRHits$adj.P.Val < cutoff)
nrow(cutBrainHits)
GenoHits <- topTable(ebFfFit, coef = grep("Genotype", colnames(coef(ebFfFit))),
adjust.method = "BH", n = Inf)
sum(GenoHits$adj.P.Val <cutoff)
plot.points = FALSE, n = 300)
densityplot(~ BRHits$adj.P.Val + GenoHits$adj.P.Val, auto.key = TRUE,
plot.points = FALSE, n = 300)
sum(GenoHits$adj.P.Val <cutoff)
sum(BRHits$adj.P.Val <cutoff)
library(preprocessCore)
```
DataNorm <- as.data.frame(normalize.quantiles(as.matrix(Data)))
dimnames(DataNorm) <- dimnames(Data)
